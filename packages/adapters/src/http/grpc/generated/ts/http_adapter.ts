/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: http_adapter.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace arcid.http {
    export class HttpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: Map<string, string>;
            query?: Map<string, string>;
            body?: string;
            headers?: Map<string, string>;
            cookies?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("cookies" in data && data.cookies != undefined) {
                    this.cookies = data.cookies;
                }
            }
            if (!this.params)
                this.params = new Map();
            if (!this.query)
                this.query = new Map();
            if (!this.headers)
                this.headers = new Map();
            if (!this.cookies)
                this.cookies = new Map();
        }
        get params() {
            return pb_1.Message.getField(this, 1) as any as Map<string, string>;
        }
        set params(value: Map<string, string>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get query() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set query(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get cookies() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set cookies(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            params?: {
                [key: string]: string;
            };
            query?: {
                [key: string]: string;
            };
            body?: string;
            headers?: {
                [key: string]: string;
            };
            cookies?: {
                [key: string]: string;
            };
        }): HttpRequest {
            const message = new HttpRequest({});
            if (typeof data.params == "object") {
                message.params = new Map(Object.entries(data.params));
            }
            if (typeof data.query == "object") {
                message.query = new Map(Object.entries(data.query));
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (typeof data.cookies == "object") {
                message.cookies = new Map(Object.entries(data.cookies));
            }
            return message;
        }
        toObject() {
            const data: {
                params?: {
                    [key: string]: string;
                };
                query?: {
                    [key: string]: string;
                };
                body?: string;
                headers?: {
                    [key: string]: string;
                };
                cookies?: {
                    [key: string]: string;
                };
            } = {};
            if (this.params != null) {
                data.params = (Object.fromEntries)(this.params);
            }
            if (this.query != null) {
                data.query = (Object.fromEntries)(this.query);
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.cookies != null) {
                data.cookies = (Object.fromEntries)(this.cookies);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.params) {
                writer.writeMessage(1, this.params, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.query) {
                writer.writeMessage(2, this.query, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.body.length)
                writer.writeString(3, this.body);
            for (const [key, value] of this.headers) {
                writer.writeMessage(4, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.cookies) {
                writer.writeMessage(5, this.cookies, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HttpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HttpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.params as any, reader, reader.readString, reader.readString));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.query as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.body = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cookies as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HttpRequest {
            return HttpRequest.deserialize(bytes);
        }
    }
    export class HttpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status_code?: number;
            data?: string;
            headers?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status_code" in data && data.status_code != undefined) {
                    this.status_code = data.status_code;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get status_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set status_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            status_code?: number;
            data?: string;
            headers?: {
                [key: string]: string;
            };
        }): HttpResponse {
            const message = new HttpResponse({});
            if (data.status_code != null) {
                message.status_code = data.status_code;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            return message;
        }
        toObject() {
            const data: {
                status_code?: number;
                data?: string;
                headers?: {
                    [key: string]: string;
                };
            } = {};
            if (this.status_code != null) {
                data.status_code = this.status_code;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status_code != 0)
                writer.writeInt32(1, this.status_code);
            if (this.data.length)
                writer.writeString(2, this.data);
            for (const [key, value] of this.headers) {
                writer.writeMessage(3, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HttpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HttpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status_code = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HttpResponse {
            return HttpResponse.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class PortRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
            }
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            port?: number;
        }): PortRequest {
            const message = new PortRequest({});
            if (data.port != null) {
                message.port = data.port;
            }
            return message;
        }
        toObject() {
            const data: {
                port?: number;
            } = {};
            if (this.port != null) {
                data.port = this.port;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port != 0)
                writer.writeInt32(1, this.port);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PortRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PortRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PortRequest {
            return PortRequest.deserialize(bytes);
        }
    }
    export class RouteDefinition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            method?: string;
            path?: string;
            handler?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("handler" in data && data.handler != undefined) {
                    this.handler = data.handler;
                }
            }
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get handler() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set handler(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            method?: string;
            path?: string;
            handler?: string;
        }): RouteDefinition {
            const message = new RouteDefinition({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.handler != null) {
                message.handler = data.handler;
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                path?: string;
                handler?: string;
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.handler != null) {
                data.handler = this.handler;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.method.length)
                writer.writeString(1, this.method);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.handler.length)
                writer.writeString(3, this.handler);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteDefinition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteDefinition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        message.handler = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteDefinition {
            return RouteDefinition.deserialize(bytes);
        }
    }
    export class MiddlewareDefinition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): MiddlewareDefinition {
            const message = new MiddlewareDefinition({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MiddlewareDefinition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MiddlewareDefinition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MiddlewareDefinition {
            return MiddlewareDefinition.deserialize(bytes);
        }
    }
    export class StatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): StatusResponse {
            const message = new StatusResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusResponse {
            return StatusResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedHttpAdapterService {
        static definition = {
            Init: {
                path: "/arcid.http.HttpAdapter/Init",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            Start: {
                path: "/arcid.http.HttpAdapter/Start",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PortRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PortRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            Stop: {
                path: "/arcid.http.HttpAdapter/Stop",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterRoute: {
                path: "/arcid.http.HttpAdapter/RegisterRoute",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RouteDefinition) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RouteDefinition.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            UseMiddleware: {
                path: "/arcid.http.HttpAdapter/UseMiddleware",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MiddlewareDefinition) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MiddlewareDefinition.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Init(call: grpc_1.ServerUnaryCall<Empty, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract Start(call: grpc_1.ServerUnaryCall<PortRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract Stop(call: grpc_1.ServerUnaryCall<Empty, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract RegisterRoute(call: grpc_1.ServerUnaryCall<RouteDefinition, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract UseMiddleware(call: grpc_1.ServerUnaryCall<MiddlewareDefinition, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    }
    export class HttpAdapterClient extends grpc_1.makeGenericClientConstructor(UnimplementedHttpAdapterService.definition, "HttpAdapter", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Init: GrpcUnaryServiceInterface<Empty, StatusResponse> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.Init(message, metadata, options, callback);
        };
        Start: GrpcUnaryServiceInterface<PortRequest, StatusResponse> = (message: PortRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.Start(message, metadata, options, callback);
        };
        Stop: GrpcUnaryServiceInterface<Empty, StatusResponse> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.Stop(message, metadata, options, callback);
        };
        RegisterRoute: GrpcUnaryServiceInterface<RouteDefinition, StatusResponse> = (message: RouteDefinition, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterRoute(message, metadata, options, callback);
        };
        UseMiddleware: GrpcUnaryServiceInterface<MiddlewareDefinition, StatusResponse> = (message: MiddlewareDefinition, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.UseMiddleware(message, metadata, options, callback);
        };
    }
}
