/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: billing_adapter.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace arcid.billing {
    export class PaymentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
            currency?: string;
            customerEmail?: string;
            metadata?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("customerEmail" in data && data.customerEmail != undefined) {
                    this.customerEmail = data.customerEmail;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get customerEmail() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set customerEmail(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            amount?: number;
            currency?: string;
            customerEmail?: string;
            metadata?: {
                [key: string]: string;
            };
        }): PaymentRequest {
            const message = new PaymentRequest({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.customerEmail != null) {
                message.customerEmail = data.customerEmail;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
                currency?: string;
                customerEmail?: string;
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.customerEmail != null) {
                data.customerEmail = this.customerEmail;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeDouble(1, this.amount);
            if (this.currency.length)
                writer.writeString(2, this.currency);
            if (this.customerEmail.length)
                writer.writeString(3, this.customerEmail);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(4, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaymentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaymentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readDouble();
                        break;
                    case 2:
                        message.currency = reader.readString();
                        break;
                    case 3:
                        message.customerEmail = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PaymentRequest {
            return PaymentRequest.deserialize(bytes);
        }
    }
    export class SubscriptionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            planId?: string;
            trialPeriodDays?: number;
            metadata?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("planId" in data && data.planId != undefined) {
                    this.planId = data.planId;
                }
                if ("trialPeriodDays" in data && data.trialPeriodDays != undefined) {
                    this.trialPeriodDays = data.trialPeriodDays;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get planId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set planId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get trialPeriodDays() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set trialPeriodDays(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            customerId?: string;
            planId?: string;
            trialPeriodDays?: number;
            metadata?: {
                [key: string]: string;
            };
        }): SubscriptionRequest {
            const message = new SubscriptionRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.planId != null) {
                message.planId = data.planId;
            }
            if (data.trialPeriodDays != null) {
                message.trialPeriodDays = data.trialPeriodDays;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                planId?: string;
                trialPeriodDays?: number;
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.planId != null) {
                data.planId = this.planId;
            }
            if (this.trialPeriodDays != null) {
                data.trialPeriodDays = this.trialPeriodDays;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.planId.length)
                writer.writeString(2, this.planId);
            if (this.trialPeriodDays != 0)
                writer.writeInt32(3, this.trialPeriodDays);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(4, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscriptionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscriptionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        message.planId = reader.readString();
                        break;
                    case 3:
                        message.trialPeriodDays = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscriptionRequest {
            return SubscriptionRequest.deserialize(bytes);
        }
    }
    export class InvoiceItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            amount?: number;
            quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            description?: string;
            amount?: number;
            quantity?: number;
        }): InvoiceItem {
            const message = new InvoiceItem({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                amount?: number;
                quantity?: number;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.amount != 0)
                writer.writeDouble(2, this.amount);
            if (this.quantity != 0)
                writer.writeInt32(3, this.quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvoiceItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvoiceItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readDouble();
                        break;
                    case 3:
                        message.quantity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvoiceItem {
            return InvoiceItem.deserialize(bytes);
        }
    }
    export class InvoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customerId?: string;
            items?: InvoiceItem[];
            metadata?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customerId" in data && data.customerId != undefined) {
                    this.customerId = data.customerId;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get customerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, InvoiceItem, 2) as InvoiceItem[];
        }
        set items(value: InvoiceItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            customerId?: string;
            items?: ReturnType<typeof InvoiceItem.prototype.toObject>[];
            metadata?: {
                [key: string]: string;
            };
        }): InvoiceRequest {
            const message = new InvoiceRequest({});
            if (data.customerId != null) {
                message.customerId = data.customerId;
            }
            if (data.items != null) {
                message.items = data.items.map(item => InvoiceItem.fromObject(item));
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                customerId?: string;
                items?: ReturnType<typeof InvoiceItem.prototype.toObject>[];
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.customerId != null) {
                data.customerId = this.customerId;
            }
            if (this.items != null) {
                data.items = this.items.map((item: InvoiceItem) => item.toObject());
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customerId.length)
                writer.writeString(1, this.customerId);
            if (this.items.length)
                writer.writeRepeatedMessage(2, this.items, (item: InvoiceItem) => item.serialize(writer));
            for (const [key, value] of this.metadata) {
                writer.writeMessage(3, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customerId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 2, InvoiceItem.deserialize(reader), InvoiceItem));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvoiceRequest {
            return InvoiceRequest.deserialize(bytes);
        }
    }
    export class CustomerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            name?: string;
            metadata?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            email?: string;
            name?: string;
            metadata?: {
                [key: string]: string;
            };
        }): CustomerRequest {
            const message = new CustomerRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                name?: string;
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.name.length)
                writer.writeString(2, this.name);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(3, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerRequest {
            return CustomerRequest.deserialize(bytes);
        }
    }
    export class WebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            payload?: string;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            payload?: string;
            signature?: string;
        }): WebhookRequest {
            const message = new WebhookRequest({});
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                payload?: string;
                signature?: string;
            } = {};
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.payload.length)
                writer.writeString(1, this.payload);
            if (this.signature.length)
                writer.writeString(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.payload = reader.readString();
                        break;
                    case 2:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookRequest {
            return WebhookRequest.deserialize(bytes);
        }
    }
    export class StatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            data?: string;
        }): StatusResponse {
            const message = new StatusResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                data?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.data.length)
                writer.writeString(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusResponse {
            return StatusResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBillingAdapterService {
        static definition = {
            CreatePayment: {
                path: "/arcid.billing.BillingAdapter/CreatePayment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PaymentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PaymentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            CreateSubscription: {
                path: "/arcid.billing.BillingAdapter/CreateSubscription",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SubscriptionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubscriptionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            CancelSubscription: {
                path: "/arcid.billing.BillingAdapter/CancelSubscription",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SubscriptionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubscriptionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            CreateInvoice: {
                path: "/arcid.billing.BillingAdapter/CreateInvoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InvoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InvoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            GetInvoice: {
                path: "/arcid.billing.BillingAdapter/GetInvoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InvoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InvoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            CreateCustomer: {
                path: "/arcid.billing.BillingAdapter/CreateCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CustomerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CustomerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            GetCustomer: {
                path: "/arcid.billing.BillingAdapter/GetCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CustomerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CustomerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            },
            HandleWebhook: {
                path: "/arcid.billing.BillingAdapter/HandleWebhook",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WebhookRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WebhookRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreatePayment(call: grpc_1.ServerUnaryCall<PaymentRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract CreateSubscription(call: grpc_1.ServerUnaryCall<SubscriptionRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract CancelSubscription(call: grpc_1.ServerUnaryCall<SubscriptionRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract CreateInvoice(call: grpc_1.ServerUnaryCall<InvoiceRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract GetInvoice(call: grpc_1.ServerUnaryCall<InvoiceRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract CreateCustomer(call: grpc_1.ServerUnaryCall<CustomerRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract GetCustomer(call: grpc_1.ServerUnaryCall<CustomerRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
        abstract HandleWebhook(call: grpc_1.ServerUnaryCall<WebhookRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    }
    export class BillingAdapterClient extends grpc_1.makeGenericClientConstructor(UnimplementedBillingAdapterService.definition, "BillingAdapter", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreatePayment: GrpcUnaryServiceInterface<PaymentRequest, StatusResponse> = (message: PaymentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePayment(message, metadata, options, callback);
        };
        CreateSubscription: GrpcUnaryServiceInterface<SubscriptionRequest, StatusResponse> = (message: SubscriptionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateSubscription(message, metadata, options, callback);
        };
        CancelSubscription: GrpcUnaryServiceInterface<SubscriptionRequest, StatusResponse> = (message: SubscriptionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.CancelSubscription(message, metadata, options, callback);
        };
        CreateInvoice: GrpcUnaryServiceInterface<InvoiceRequest, StatusResponse> = (message: InvoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateInvoice(message, metadata, options, callback);
        };
        GetInvoice: GrpcUnaryServiceInterface<InvoiceRequest, StatusResponse> = (message: InvoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetInvoice(message, metadata, options, callback);
        };
        CreateCustomer: GrpcUnaryServiceInterface<CustomerRequest, StatusResponse> = (message: CustomerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateCustomer(message, metadata, options, callback);
        };
        GetCustomer: GrpcUnaryServiceInterface<CustomerRequest, StatusResponse> = (message: CustomerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCustomer(message, metadata, options, callback);
        };
        HandleWebhook: GrpcUnaryServiceInterface<WebhookRequest, StatusResponse> = (message: WebhookRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.HandleWebhook(message, metadata, options, callback);
        };
    }
}
