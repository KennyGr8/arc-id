/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: cache_adapter.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace arcid.cache {
    export class CacheGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: string;
        }): CacheGetRequest {
            const message = new CacheGetRequest({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CacheGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CacheGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CacheGetRequest {
            return CacheGetRequest.deserialize(bytes);
        }
    }
    export class CacheSetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: string;
            ttl?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("ttl" in data && data.ttl != undefined) {
                    this.ttl = data.ttl;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ttl() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ttl(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key?: string;
            value?: string;
            ttl?: number;
        }): CacheSetRequest {
            const message = new CacheSetRequest({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.ttl != null) {
                message.ttl = data.ttl;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
                ttl?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.ttl != null) {
                data.ttl = this.ttl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (this.ttl != 0)
                writer.writeInt32(3, this.ttl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CacheSetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CacheSetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    case 3:
                        message.ttl = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CacheSetRequest {
            return CacheSetRequest.deserialize(bytes);
        }
    }
    export class CacheDelRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: string;
        }): CacheDelRequest {
            const message = new CacheDelRequest({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CacheDelRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CacheDelRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CacheDelRequest {
            return CacheDelRequest.deserialize(bytes);
        }
    }
    export class CacheResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            value?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean;
            value?: string;
            message?: string;
        }): CacheResponse {
            const message = new CacheResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                value?: string;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CacheResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CacheResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CacheResponse {
            return CacheResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCacheAdapterService {
        static definition = {
            Get: {
                path: "/arcid.cache.CacheAdapter/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CacheGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CacheGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CacheResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CacheResponse.deserialize(new Uint8Array(bytes))
            },
            Set: {
                path: "/arcid.cache.CacheAdapter/Set",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CacheSetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CacheSetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CacheResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CacheResponse.deserialize(new Uint8Array(bytes))
            },
            Del: {
                path: "/arcid.cache.CacheAdapter/Del",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CacheDelRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CacheDelRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CacheResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CacheResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Get(call: grpc_1.ServerUnaryCall<CacheGetRequest, CacheResponse>, callback: grpc_1.sendUnaryData<CacheResponse>): void;
        abstract Set(call: grpc_1.ServerUnaryCall<CacheSetRequest, CacheResponse>, callback: grpc_1.sendUnaryData<CacheResponse>): void;
        abstract Del(call: grpc_1.ServerUnaryCall<CacheDelRequest, CacheResponse>, callback: grpc_1.sendUnaryData<CacheResponse>): void;
    }
    export class CacheAdapterClient extends grpc_1.makeGenericClientConstructor(UnimplementedCacheAdapterService.definition, "CacheAdapter", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Get: GrpcUnaryServiceInterface<CacheGetRequest, CacheResponse> = (message: CacheGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CacheResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CacheResponse>, callback?: grpc_1.requestCallback<CacheResponse>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
        Set: GrpcUnaryServiceInterface<CacheSetRequest, CacheResponse> = (message: CacheSetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CacheResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CacheResponse>, callback?: grpc_1.requestCallback<CacheResponse>): grpc_1.ClientUnaryCall => {
            return super.Set(message, metadata, options, callback);
        };
        Del: GrpcUnaryServiceInterface<CacheDelRequest, CacheResponse> = (message: CacheDelRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CacheResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CacheResponse>, callback?: grpc_1.requestCallback<CacheResponse>): grpc_1.ClientUnaryCall => {
            return super.Del(message, metadata, options, callback);
        };
    }
}
