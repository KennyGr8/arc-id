/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: mail_adapter.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace arcid.mail {
    export class SendEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            to?: string;
            subject?: string;
            text?: string;
            html?: string;
            template?: string;
            data?: Map<string, string>;
            from?: string;
            cc?: string[];
            bcc?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("subject" in data && data.subject != undefined) {
                    this.subject = data.subject;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("html" in data && data.html != undefined) {
                    this.html = data.html;
                }
                if ("template" in data && data.template != undefined) {
                    this.template = data.template;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("cc" in data && data.cc != undefined) {
                    this.cc = data.cc;
                }
                if ("bcc" in data && data.bcc != undefined) {
                    this.bcc = data.bcc;
                }
            }
            if (!this.data)
                this.data = new Map();
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get subject() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set subject(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get html() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set html(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get template() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set template(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get data() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set data(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get cc() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set cc(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get bcc() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set bcc(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            to?: string;
            subject?: string;
            text?: string;
            html?: string;
            template?: string;
            data?: {
                [key: string]: string;
            };
            from?: string;
            cc?: string[];
            bcc?: string[];
        }): SendEmailRequest {
            const message = new SendEmailRequest({});
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.subject != null) {
                message.subject = data.subject;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.html != null) {
                message.html = data.html;
            }
            if (data.template != null) {
                message.template = data.template;
            }
            if (typeof data.data == "object") {
                message.data = new Map(Object.entries(data.data));
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.cc != null) {
                message.cc = data.cc;
            }
            if (data.bcc != null) {
                message.bcc = data.bcc;
            }
            return message;
        }
        toObject() {
            const data: {
                to?: string;
                subject?: string;
                text?: string;
                html?: string;
                template?: string;
                data?: {
                    [key: string]: string;
                };
                from?: string;
                cc?: string[];
                bcc?: string[];
            } = {};
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.subject != null) {
                data.subject = this.subject;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.html != null) {
                data.html = this.html;
            }
            if (this.template != null) {
                data.template = this.template;
            }
            if (this.data != null) {
                data.data = (Object.fromEntries)(this.data);
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.cc != null) {
                data.cc = this.cc;
            }
            if (this.bcc != null) {
                data.bcc = this.bcc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.to.length)
                writer.writeString(1, this.to);
            if (this.subject.length)
                writer.writeString(2, this.subject);
            if (this.text.length)
                writer.writeString(3, this.text);
            if (this.html.length)
                writer.writeString(4, this.html);
            if (this.template.length)
                writer.writeString(5, this.template);
            for (const [key, value] of this.data) {
                writer.writeMessage(6, this.data, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.from.length)
                writer.writeString(7, this.from);
            if (this.cc.length)
                writer.writeRepeatedString(8, this.cc);
            if (this.bcc.length)
                writer.writeRepeatedString(9, this.bcc);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.to = reader.readString();
                        break;
                    case 2:
                        message.subject = reader.readString();
                        break;
                    case 3:
                        message.text = reader.readString();
                        break;
                    case 4:
                        message.html = reader.readString();
                        break;
                    case 5:
                        message.template = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.data as any, reader, reader.readString, reader.readString));
                        break;
                    case 7:
                        message.from = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendEmailRequest {
            return SendEmailRequest.deserialize(bytes);
        }
    }
    export class StatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): StatusResponse {
            const message = new StatusResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusResponse {
            return StatusResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMailerAdapterService {
        static definition = {
            SendEmail: {
                path: "/arcid.mail.MailerAdapter/SendEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SendEmail(call: grpc_1.ServerUnaryCall<SendEmailRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    }
    export class MailerAdapterClient extends grpc_1.makeGenericClientConstructor(UnimplementedMailerAdapterService.definition, "MailerAdapter", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SendEmail: GrpcUnaryServiceInterface<SendEmailRequest, StatusResponse> = (message: SendEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.SendEmail(message, metadata, options, callback);
        };
    }
}
