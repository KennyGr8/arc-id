generator client {
  provider = "prisma-client-js"
  engineType = "node-api"
  output   = "../../generated/postgres"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

// ENUMS
enum MfaType {
  TOTP
  WEBAUTHN
  EMAIL
  SMS
}

enum Role {
  ADMIN
  USER
  GUEST
  CUSTOM // for dynamic/sector-specific roles
}

enum UserStatus {
  ACTIVE
  INACTIVE
  VERIFIED
  SUSPENDED
  BANNED
  DELETED
  PENDING
  CUSTOM // for dynamic/sector-specific status
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
  STUDENT
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  EXPIRED
}

enum TokenType {
  VERIFY_EMAIL
  RESET_PASSWORD
  MAGIC_LINK
}

// DYNAMIC / EXTENSIBLE TABLES
model DynamicRole {
  id        String   @id @default(cuid())
  name      String   @unique
  sector    String?  // e.g. "healthcare", "agriculture"
  createdAt DateTime @default(now())

  users     User[]   @relation("UserDynamicRole")
}

model DynamicStatus {
  id        String   @id @default(cuid())
  name      String
  sector    String?
  createdAt DateTime @default(now())

  users     User[]   @relation("UserDynamicStatus")
}

// CORE MODELS
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  passwordHash   String
  name           String?
  role           Role            @default(USER)
  status         UserStatus      @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Dynamic optional links
  dynamicRoleId   String?
  dynamicRole     DynamicRole?   @relation("UserDynamicRole", fields: [dynamicRoleId], references: [id])

  dynamicStatusId String?
  dynamicStatus   DynamicStatus? @relation("UserDynamicStatus", fields: [dynamicStatusId], references: [id])

  // Relations
  sessions        Session[]
  devices         Device[]
  mfas            Mfa[]
  subscriptions   Subscription[]
  oauthAccounts   OAuthAccount[]
  emailTokens     EmailToken[]

  @@index([createdAt])
}

model Session {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  ip         String?
  userAgent  String?
  deviceId   String?
  device     Device?   @relation(fields: [deviceId], references: [id])
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  valid      Boolean   @default(true)
  lastUsedAt DateTime  @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model Device {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String?
  fingerprint String    @unique
  platform    String?
  browser     String?
  city        String?
  country     String?
  createdAt   DateTime  @default(now())
  lastSeenAt  DateTime  @default(now())

  sessions    Session[]

  @@index([userId])
}

model Mfa {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      MfaType
  secret    String?
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Subscription {
  id         String             @id @default(cuid())
  userId     String
  user       User               @relation(fields: [userId], references: [id])
  plan       SubscriptionPlan   @default(FREE)
  status     SubscriptionStatus @default(ACTIVE)
  startedAt  DateTime           @default(now())
  endsAt     DateTime?
  canceledAt DateTime?

  @@index([userId])
  @@index([status])
}

model OAuthAccount {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  createdAt      DateTime @default(now())

  @@unique([provider, providerUserId])
  @@index([userId])
}

model EmailToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  type      TokenType
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  consumed  Boolean   @default(false)

  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}
